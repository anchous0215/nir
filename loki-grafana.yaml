# 1. Loki Service
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: logging
  labels:
    app: loki
spec:
  ports:
  - port: 3100
    protocol: TCP
    name: http-metrics
  selector:
    app: loki

---
# 2. Loki StatefulSet (используем StatefulSet для стабильного имени)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki
  namespace: logging
  labels:
    app: loki
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  serviceName: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
      - name: loki
        image: grafana/loki:2.9.2 # Используем конкретную версию
        args:
        - -config.file=/etc/loki/loki-config.yaml
        ports:
        - containerPort: 3100
          name: http-metrics
        volumeMounts:
        - name: config
          mountPath: /etc/loki/
        - name: storage
          mountPath: /data
      volumes:
      - name: config
        configMap:
          name: loki-config
      - name: storage
        emptyDir: {} # Храним данные во временной папке

---
# 3. Loki ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: logging
data:
  loki-config.yaml: |
    auth_enabled: false
    server:
      http_listen_port: 3100
    ingester:
      lifecycler:
        address: 127.0.0.1
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
        final_sleep: 0s
      chunk_idle_period: 1m
      chunk_target_size: 1048576
      max_transfer_retries: 0
      wal:
        enabled: true
        dir: /data/loki/wal
    schema_config:
      configs:
      - from: 2020-10-24
        store: boltdb-shipper
        object_store: filesystem
        schema: v11
        index:
          prefix: index_
          period: 24h
    storage_config:
      boltdb_shipper:
        active_index_directory: /data/loki/boltdb-shipper-active
        cache_location: /data/loki/boltdb-shipper-cache
        cache_ttl: 24h
        shared_store: filesystem
      filesystem:
        directory: /data/loki/chunks
    compactor:
      working_directory: /data/loki/boltdb-shipper-compactor
      shared_store: filesystem
    limits_config:
      reject_old_samples: true
      reject_old_samples_max_age: 168h
---
# 4. Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: logging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.1.5 # Используем конкретную версию
        ports:
        - containerPort: 3000

---
# 5. Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: logging
spec:
  ports:
  - port: 3000
    protocol: TCP
  selector:
    app: grafana
  # Для легкого доступа извне изменим тип на NodePort
  type: NodePort
